# Copyright (c) 2025 CodeLibs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Docker Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository }}/assera-api
  UI_IMAGE_NAME: ${{ github.repository }}/assera-ui

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-api:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: ./assera-api
          file: ./assera-api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push-ui:
    name: Build and Push UI Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push UI image
        uses: docker/build-push-action@v6
        with:
          context: ./assera-ui
          file: ./assera-ui/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  update-docker-compose:
    name: Update Docker Compose Images
    runs-on: ubuntu-latest
    needs: [build-and-push-api, build-and-push-ui]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update compose.yaml with new image tags
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Updating to version: $VERSION"

          # Update image references in compose.yaml
          sed -i "s|image: .*guidra-api.*|image: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:$VERSION|g" compose.yaml
          sed -i "s|image: .*guidra-ui.*|image: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:$VERSION|g" compose.yaml

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Docker images to ${{ github.ref_name }}"
          branch: update-docker-images-${{ github.ref_name }}
          title: "Update Docker images to ${{ github.ref_name }}"
          body: |
            Automated PR to update Docker image tags in compose.yaml to ${{ github.ref_name }}

            - API: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ github.ref_name }}
            - UI: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:${{ github.ref_name }}

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [build-and-push-api, build-and-push-ui]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "# Docker Build and Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Images Published" >> $GITHUB_STEP_SUMMARY
          echo "- API: \`${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- UI: \`${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "- API Build: ${{ needs.build-and-push-api.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- UI Build: ${{ needs.build-and-push-ui.result }}" >> $GITHUB_STEP_SUMMARY
