# Copyright (c) 2025 CodeLibs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner (API)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './intaste-api'
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results (API)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-api-results.sarif'
          category: 'trivy-api'

      - name: Run Trivy vulnerability scanner (UI)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './intaste-ui'
          format: 'sarif'
          output: 'trivy-ui-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results (UI)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-ui-results.sarif'
          category: 'trivy-ui'

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./intaste-api
          file: ./intaste-api/Dockerfile
          push: false
          load: true
          tags: intaste-api:scan

      - name: Run Trivy scanner on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'intaste-api:scan'
          format: 'sarif'
          output: 'trivy-api-image.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload API image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-api-image.sarif'
          category: 'trivy-api-image'

      - name: Build UI image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./intaste-ui
          file: ./intaste-ui/Dockerfile
          push: false
          load: true
          tags: intaste-ui:scan

      - name: Run Trivy scanner on UI image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'intaste-ui:scan'
          format: 'sarif'
          output: 'trivy-ui-image.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload UI image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-ui-image.sarif'
          category: 'trivy-ui-image'

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install licensecheck
        run: pip install licensecheck

      - name: Check Python dependencies licenses
        run: |
          cd intaste-api
          pip install -e .
          licensecheck --format json > ../api-licenses.json || true

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Check Node dependencies licenses
        run: |
          cd intaste-ui
          npm ci
          npx license-checker --json > ../ui-licenses.json || true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            api-licenses.json
            ui-licenses.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, docker-scan, codeql, license-check]
    if: always()
    steps:
      - name: Check security scan results
        run: |
          echo "Security Scan Summary:"
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "- Docker Scan: ${{ needs.docker-scan.result }}"
          echo "- CodeQL: ${{ needs.codeql.result }}"
          echo "- License Check: ${{ needs.license-check.result }}"

          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.codeql.result }}" == "failure" ]]; then
            echo "⚠️  Security vulnerabilities detected. Please review the security tab."
            exit 1
          fi

          echo "✅ All security checks passed!"
