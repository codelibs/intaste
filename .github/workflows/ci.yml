# Copyright (c) 2025 CodeLibs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  api-lint:
    name: API Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          cd assera-api
          uv sync

      - name: Run ruff (linter)
        run: |
          cd assera-api
          uv run ruff check app/

      - name: Run black (formatter check)
        run: |
          cd assera-api
          uv run black --check app/

      - name: Run mypy (type checker)
        run: |
          cd assera-api
          uv run mypy app/

  api-test:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          cd assera-api
          uv sync

      - name: Run tests with coverage
        run: |
          cd assera-api
          uv run pytest --cov=app --cov-report=xml --cov-report=term-missing

  ui-lint:
    name: UI Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: assera-ui/package-lock.json

      - name: Install dependencies
        run: |
          cd assera-ui
          npm ci

      - name: Run ESLint
        run: |
          cd assera-ui
          npm run lint

      - name: Run TypeScript type check
        run: |
          cd assera-ui
          npm run type-check

      - name: Run Prettier check
        run: |
          cd assera-ui
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  ui-test:
    name: UI Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: assera-ui/package-lock.json

      - name: Install dependencies
        run: |
          cd assera-ui
          npm ci

      - name: Run unit tests with coverage
        run: |
          cd assera-ui
          npm test -- --run --coverage

  ui-e2e:
    name: UI E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: assera-ui/package-lock.json

      - name: Install dependencies
        run: |
          cd assera-ui
          npm ci

      - name: Install Playwright browsers
        run: |
          cd assera-ui
          npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: |
          cd assera-ui
          npm run test:e2e -- --project=chromium

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: assera-ui/playwright-report/
          retention-days: 30

  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    needs: [api-lint, api-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./assera-api
          file: ./assera-api/Dockerfile
          push: false
          tags: assera-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-ui:
    name: Build UI Docker Image
    runs-on: ubuntu-latest
    needs: [ui-lint, ui-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./assera-ui
          file: ./assera-ui/Dockerfile
          push: false
          tags: assera-ui:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-api, build-ui]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test .env file
        run: |
          cat > .env << EOF
          ASSERA_API_TOKEN=$(openssl rand -hex 32)
          ASSERA_DEFAULT_MODEL=gpt-oss
          FESS_BASE_URL=http://fess:8080
          OLLAMA_BASE_URL=http://ollama:11434
          NEXT_PUBLIC_API_BASE=/api/v1
          TZ=UTC
          EOF

      - name: Start services with Docker Compose
        run: |
          docker compose up -d --build
          sleep 30

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          for i in {1..30}; do
            if docker compose ps | grep -q "healthy"; then
              echo "Services are healthy"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
          done

      - name: Check service health
        run: |
          docker compose ps
          docker compose logs assera-api | tail -50
          docker compose logs assera-ui | tail -50

      - name: Test API health endpoint
        run: |
          curl -f http://localhost:3000 || exit 1

      - name: Stop services
        if: always()
        run: docker compose down -v

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [api-lint, api-test, ui-lint, ui-test, ui-e2e, build-api, build-ui]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.api-lint.result }}" != "success" ]] || \
             [[ "${{ needs.api-test.result }}" != "success" ]] || \
             [[ "${{ needs.ui-lint.result }}" != "success" ]] || \
             [[ "${{ needs.ui-test.result }}" != "success" ]] || \
             [[ "${{ needs.ui-e2e.result }}" != "success" ]] || \
             [[ "${{ needs.build-api.result }}" != "success" ]] || \
             [[ "${{ needs.build-ui.result }}" != "success" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"
