# Intaste Configuration Example
# Copy this file to .env and update values as needed

# ===== Intaste API Configuration =====
# API authentication token (REQUIRED - generate a secure random token)
# Example: openssl rand -hex 32
INTASTE_API_TOKEN=change-me-to-a-secure-random-token-at-least-32-chars

# Default LLM model for Ollama
INTASTE_DEFAULT_MODEL=gpt-oss

# Search provider (currently only 'fess' supported)
INTASTE_SEARCH_PROVIDER=fess

# LLM provider (currently only 'ollama' supported)
INTASTE_LLM_PROVIDER=ollama

# ===== Service Endpoints (Internal Docker Network) =====
# Fess search engine
FESS_BASE_URL=http://intaste-fess:8080
FESS_TIMEOUT_MS=2000

# Ollama LLM service
OLLAMA_BASE_URL=http://intaste-ollama:11434
INTASTE_LLM_TIMEOUT_MS=3000
INTASTE_LLM_TEMPERATURE=0.2
INTASTE_LLM_TOP_P=0.9

# LLM Warmup (preload model on startup for faster first requests)
INTASTE_LLM_WARMUP_ENABLED=true
INTASTE_LLM_WARMUP_TIMEOUT_MS=30000

# GPU Configuration
# Ollama will automatically use NVIDIA GPU if available (requires nvidia-docker runtime)
# The docker compose configuration includes GPU support by default
# If GPU is not available, Ollama will automatically fall back to CPU
# To check GPU status: make gpu-check
# Prerequisites for GPU:
#   - NVIDIA GPU with recent drivers
#   - nvidia-docker2 or NVIDIA Container Toolkit installed
#   - Docker Compose v2.x or later

# ===== Request Configuration =====
# Total request timeout budget (ms)
# Increased to 180000ms (3 minutes) to accommodate slow LLM processing
# - Intent extraction: 20% (36000ms)
# - Search execution: 15% (27000ms)
# - Relevance evaluation: 20% (36000ms)
# - Retry search: 25% (45000ms, includes re-intent + search + relevance)
# - Answer composition: 10% (18000ms)
REQ_TIMEOUT_MS=180000

# Relevance evaluation configuration
# Minimum relevance score threshold (0.0-1.0) to accept results without retry
INTASTE_RELEVANCE_THRESHOLD=0.3

# Maximum number of retry attempts when relevance scores are below threshold
INTASTE_MAX_RETRY_COUNT=2

# Rate limiting
INTASTE_RATE_LIMIT_PER_MINUTE=60

# ===== CORS Configuration =====
# Allowed origins for API access (comma-separated for multiple origins)
# Single origin: http://localhost:3000
# Multiple origins: http://localhost:3000,http://localhost:3001,http://example.com
CORS_ORIGINS=http://localhost:3000

# ===== UI Configuration =====
# API base path for Next.js frontend
NEXT_PUBLIC_API_BASE=/api/v1

# ===== Logging =====
LOG_LEVEL=INFO
LOG_PII_MASKING=true
DEBUG=false

# ===== Docker User Configuration =====
# Set UID/GID to match host user for proper file permissions
# Default: 1001 (matches Dockerfile defaults)
INTASTE_UID=1000
INTASTE_GID=1000

# ===== Timezone =====
TZ=UTC
